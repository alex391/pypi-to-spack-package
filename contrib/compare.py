import spack.repo

packages = [
    "py-a2wsgi",
    "py-about-time",
    "py-accelerate",
    "py-accessible-pygments",
    "py-acme-tiny",
    "py-adal",
    "py-adb-enhanced",
    "py-addict",
    "py-aenum",
    "py-affine",
    "py-agate-dbf",
    "py-agate",
    "py-ahpy",
    "py-aiofiles",
    "py-aiohttp-cors",
    "py-aioitertools",
    "py-aioredis",
    "py-aiosignal",
    "py-aiosqlite",
    "py-alabaster",
    "py-alive-progress",
    "py-alpaca-eval",
    "py-alpaca-farm",
    "py-altair",
    "py-altgraph",
    "py-ampltools",
    "py-amqp",
    "py-aniso8601",
    "py-anndata",
    "py-annexremote",
    "py-ansi2html",
    "py-ansimarkup",
    "py-ansiwrap",
    "py-anytree",
    "py-apache-libcloud",
    "py-apeye-core",
    "py-apeye",
    "py-apipkg",
    "py-apispec",
    "py-appdirs/decode",
    "py-appdirs",
    "py-appdirs/setuptools",
    "py-applicationinsights",
    "py-appnope",
    "py-archspec",
    "py-arcp",
    "py-argcomplete",
    "py-argh",
    "py-argparse-dataclass",
    "py-arrow",
    "py-art",
    "py-arviz",
    "py-asdf-standard",
    "py-asdf-transform-schemas",
    "py-asdf-unit-schemas",
    "py-asgiref",
    "py-asn1crypto",
    "py-aspy-yaml",
    "py-asserts",
    "py-astor",
    "py-astpretty",
    "py-astroid",
    "py-astroid",
    "py-asttokens",
    "py-astunparse",
    "py-async-generator",
    "py-async-timeout",
    "py-asynctest",
    "py-attmap",
    "py-attrs",
    "py-auditwheel",
    "py-autocfg",
    "py-autodocsumm",
    "py-automat",
    "py-autoray",
    "py-auxlib",
    "py-awkward0",
    "py-ax-platform",
    "py-azure-batch",
    "py-azure-cli-command-modules-nspkg",
    "py-azure-cli-core",
    "py-azure-cli-nspkg",
    "py-azure-cli-telemetry",
    "py-azure-cli",
    "py-azure-common",
    "py-azure-core",
    "py-azure-cosmos",
    "py-azure-datalake-store",
    "py-azure-functions-devops-build",
    "py-azure-graphrbac",
    "py-azure-identity",
    "py-azure-keyvault-certificates",
    "py-azure-keyvault-keys",
    "py-azure-keyvault-nspkg",
    "py-azure-keyvault-secrets",
    "py-azure-keyvault",
    "py-azure-loganalytics",
    "py-azure-mgmt-advisor",
    "py-azure-mgmt-apimanagement",
    "py-azure-mgmt-appconfiguration",
    "py-azure-mgmt-applicationinsights",
    "py-azure-mgmt-authorization",
    "py-azure-mgmt-batch",
    "py-azure-mgmt-batchai",
    "py-azure-mgmt-billing",
    "py-azure-mgmt-botservice",
    "py-azure-mgmt-cdn",
    "py-azure-mgmt-cognitiveservices",
    "py-azure-mgmt-compute",
    "py-azure-mgmt-consumption",
    "py-azure-mgmt-containerinstance",
    "py-azure-mgmt-containerregistry",
    "py-azure-mgmt-containerservice",
    "py-azure-mgmt-core",
    "py-azure-mgmt-cosmosdb",
    "py-azure-mgmt-datamigration",
    "py-azure-mgmt-deploymentmanager",
    "py-azure-mgmt-devtestlabs",
    "py-azure-mgmt-dns",
    "py-azure-mgmt-eventgrid",
    "py-azure-mgmt-eventhub",
    "py-azure-mgmt-hdinsight",
    "py-azure-mgmt-imagebuilder",
    "py-azure-mgmt-iotcentral",
    "py-azure-mgmt-iothub",
    "py-azure-mgmt-iothubprovisioningservices",
    "py-azure-mgmt-keyvault",
    "py-azure-mgmt-kusto",
    "py-azure-mgmt-loganalytics",
    "py-azure-mgmt-managedservices",
    "py-azure-mgmt-managementgroups",
    "py-azure-mgmt-maps",
    "py-azure-mgmt-marketplaceordering",
    "py-azure-mgmt-media",
    "py-azure-mgmt-monitor",
    "py-azure-mgmt-msi",
    "py-azure-mgmt-netapp",
    "py-azure-mgmt-network",
    "py-azure-mgmt-nspkg",
    "py-azure-mgmt-policyinsights",
    "py-azure-mgmt-privatedns",
    "py-azure-mgmt-rdbms",
    "py-azure-mgmt-recoveryservices",
    "py-azure-mgmt-recoveryservicesbackup",
    "py-azure-mgmt-redhatopenshift",
    "py-azure-mgmt-redis",
    "py-azure-mgmt-relay",
    "py-azure-mgmt-reservations",
    "py-azure-mgmt-resource",
    "py-azure-mgmt-search",
    "py-azure-mgmt-security",
    "py-azure-mgmt-servicebus",
    "py-azure-mgmt-servicefabric",
    "py-azure-mgmt-signalr",
    "py-azure-mgmt-sql",
    "py-azure-mgmt-sqlvirtualmachine",
    "py-azure-mgmt-storage",
    "py-azure-mgmt-trafficmanager",
    "py-azure-mgmt-web",
    "py-azure-multiapi-storage",
    "py-azure-nspkg",
    "py-azure-storage-blob",
    "py-azure-storage-common",
    "py-azure-storage-nspkg",
    "py-azureml-automl-core",
    "py-azureml-core",
    "py-azureml-dataprep",
    "py-azureml-dataset-runtime",
    "py-azureml-pipeline-core",
    "py-azureml-pipeline-steps",
    "py-azureml-pipeline",
    "py-azureml-sdk",
    "py-azureml-telemetry",
    "py-azureml-train-automl-client",
    "py-azureml-train-core",
    "py-azureml-train-restclients-hyperdrive",
    "py-azureml-train",
    "py-babel",
    "py-backoff",
    "py-backports-abc",
    "py-backports-entry-points-selectable",
    "py-backports-os",
    "py-backports-tempfile",
    "py-backports-weakref",
    "py-bagit-profile",
    "py-bagit",
    "py-bakta",
    "py-bandit",
    "py-barectf",
    "py-bash-kernel",
    "py-batchspawner",
    "py-bdbag",
    "py-beartype",
    "py-beautifulsoup4",
    "py-bids-validator",
    "py-bidscoin",
    "py-bidskit",
    "py-binaryornot",
    "py-biobb-common",
    "py-biobb-gromacs",
    "py-biobb-io",
    "py-biobb-model",
    "py-biobb-structure-checking",
    "py-biobb-structure-utils",
    "py-bioblend",
    "py-biopandas",
    "py-blight",
    "py-bluepyefe",
    "py-bluepyopt",
    "py-bluepyopt",
    "py-boltons",
    "py-boto",
    "py-boto3",
    "py-botocore",
    "py-botorch",
    "py-branca",
    "py-bravado",
    "py-breathe",
    "py-build",
    "py-cachecontrol",
    "py-cached-property",
    "py-cachetools",
    "py-cachy",
    "py-cairosvg",
    "py-callmonitor",
    "py-calver",
    "py-catalogue",
    "py-catkin-pkg",
    "py-cattrs",
    "py-celery",
    "py-certifi",
    "py-certipy",
    "py-cf-xarray",
    "py-cffconvert",
    "py-cfgrib",
    "py-cfgv",
    "py-chainmap",
    "py-chardet",
    "py-chart-studio",
    "py-cheap-repr",
    "py-checkm-genome",
    "py-cherrypy",
    "py-chex",
    "py-ci-info",
    "py-circus",
    "py-citeproc-py",
    "py-clean-text",
    "py-cleo",
    "py-click-option-group",
    "py-click-plugins",
    "py-click-repl",
    "py-click",
    "py-cligj",
    "py-clikit",
    "py-climate",
    "py-climax",
    "py-cloudauthz",
    "py-cloudbridge",
    "py-cloudpickle",
    "py-cma",
    "py-cmaes",
    "py-cmake-format",
    "py-cmocean",
    "py-cmseq",
    "py-cmyt",
    "py-codespell",
    "py-colabtools",
    "py-colorama",
    "py-colorcet",
    "py-coloredlogs",
    "py-colorful",
    "py-colorio",
    "py-colorlog",
    "py-colorlover",
    "py-colorspacious",
    "py-comm",
    "py-commonmark",
    "py-conda-inject",
    "py-conda-souschef",
    "py-confection",
    "py-consolekit",
    "py-constantly",
    "py-contextily",
    "py-contextlib2",
    "py-convertdate",
    "py-cookiecutter",
    "py-copulas",
    "py-corner",
    "py-coveralls",
    "py-crashtest",
    "py-croniter",
    "py-crossmap",
    "py-css-parser",
    "py-cssselect",
    "py-cssselect2",
    "py-cssutils",
    "py-ctgan",
    "py-current",
    "py-currentscape",
    "py-custom-inherit",
    "py-cwl-upgrader",
    "py-cwl-utils",
    "py-cwltool",
    "py-cycler",
    "py-cylc-flow",
    "py-cylc-rose",
    "py-cylc-uiserver",
    "py-dalib",
    "py-dasbus",
    "py-dask-glm",
    "py-dask-mpi",
    "py-dask-mpi/remove-dependency-jupyter",
    "py-dask-sphinx-theme",
    "py-dataclasses-json",
    "py-datacube",
    "py-datalad-container",
    "py-datalad-deprecated",
    "py-datalad-hirni",
    "py-datalad-metadata-model",
    "py-datalad-metalad",
    "py-datalad-neuroimaging",
    "py-datalad-webapp",
    "py-datalad",
    "py-datasets",
    "py-dateparser",
    "py-dateutils",
    "py-dbfread",
    "py-dcm2bids",
    "py-debtcollector",
    "py-decorator",
    "py-deepdiff",
    "py-deepecho",
    "py-deephyper",
    "py-deepsig",
    "py-defusedxml",
    "py-deprecated",
    "py-deprecation-alias",
    "py-deprecation",
    "py-descartes",
    "py-devito",
    "py-dh-scikit-optimize",
    "py-dict2css",
    "py-dictdiffer",
    "py-diskcache",
    "py-dist-meta",
    "py-distlib",
    "py-distro",
    "py-django",
    "py-dnspython",
    "py-docstring-parser",
    "py-docstring-to-markdown",
    "py-docutils-stubs",
    "py-docutils",
    "py-doit",
    "py-dom-toml",
    "py-domdf-python-tools",
    "py-dominate",
    "py-dotmap",
    "py-downhill",
    "py-dunamai",
    "py-dynaconf",
    "py-ecdsa",
    "py-edam-ontology",
    "py-editables",
    "py-einops",
    "py-elastic-transport",
    "py-elasticsearch-dsl",
    "py-elasticsearch",
    "py-email-validator",
    "py-entrypoints",
    "py-enum-tools",
    "py-etelemetry",
    "py-etils",
    "py-exceptiongroup",
    "py-execnet",
    "py-executing",
    "py-exhale",
    "py-exifread",
    "py-exodus-bundler",
    "py-expecttest",
    "py-extension-helpers",
    "py-extras",
    "py-fabric",
    "py-fabric3",
    "py-faker",
    "py-fastai",
    "py-fastapi-utils",
    "py-fastapi",
    "py-fastcore",
    "py-fastdownload",
    "py-fasteners",
    "py-fastjsonschema",
    "py-fastprogress",
    "py-fava",
    "py-file-magic",
    "py-filecheck",
    "py-filetype",
    "py-find-libpython",
    "py-fixtures",
    "py-flake8-import-order",
    "py-flake8-polyfill",
    "py-flake8",
    "py-flaky",
    "py-flask-babel",
    "py-flask-cors",
    "py-flask-paginate",
    "py-flask-restful",
    "py-flask-socketio",
    "py-flask-sqlalchemy",
    "py-flask",
    "py-flatbuffers",
    "py-flatten-dict",
    "py-flawfinder",
    "py-flax",
    "py-flexx",
    "py-flit-core",
    "py-flit-scm",
    "py-flit",
    "py-folium",
    "py-fonttools",
    "py-ford",
    "py-formulaic",
    "py-fortls",
    "py-fprettify",
    "py-fqdn",
    "py-fracridge",
    "py-fraction",
    "py-freezegun",
    "py-furo",
    "py-fuzzywuzzy",
    "py-galaxy-containers",
    "py-galaxy-job-metrics",
    "py-galaxy-objectstore",
    "py-galaxy-sequence-utils",
    "py-galaxy-tool-util",
    "py-galaxy-util",
    "py-galaxy2cwl",
    "py-gcovr",
    "py-gcsfs",
    "py-gdbgui",
    "py-geeadd",
    "py-generateds",
    "py-genshi",
    "py-geoalchemy2",
    "py-geographiclib",
    "py-geomdl",
    "py-geopandas",
    "py-geoplot",
    "py-geopy",
    "py-ghp-import",
    "py-gidgethub",
    "py-gidgetlab",
    "py-gimmik",
    "py-gitdb",
    "py-globus-sdk",
    "py-glymur",
    "py-gooey",
    "py-google-api-core",
    "py-google-api-python-client",
    "py-google-apitools",
    "py-google-auth-httplib2",
    "py-google-auth-oauthlib",
    "py-google-auth",
    "py-google-cloud-appengine-logging",
    "py-google-cloud-audit-log",
    "py-google-cloud-batch",
    "py-google-cloud-core",
    "py-google-cloud-logging",
    "py-google-cloud-storage",
    "py-google-pasta",
    "py-google-reauth",
    "py-google-resumable-media",
    "py-google",
    "py-googledrivedownloader",
    "py-gql",
    "py-gradio-client",
    "py-gradio",
    "py-grandalf",
    "py-graphene-tornado",
    "py-graphene",
    "py-graphlib-backport",
    "py-graphql-core",
    "py-graphql-relay",
    "py-graphql-ws",
    "py-graphviz",
    "py-gravity",
    "py-grayskull",
    "py-griddataformats",
    "py-griffe",
    "py-grpc-google-iam-v1",
    "py-grpcio-status",
    "py-gtdbtk",
    "py-gunicorn",
    "py-gxformat2",
    "py-h11",
    "py-h2",
    "py-h5glance",
    "py-h5io",
    "py-h5netcdf",
    "py-h5sh",
    "py-hacking",
    "py-handy-archives",
    "py-hatch-fancy-pypi-readme",
    "py-hatch-jupyter-builder",
    "py-hatch-nodejs-version",
    "py-hatch-requirements-txt",
    "py-hatch-vcs",
    "py-hatchling",
    "py-heapdict",
    "py-heat",
    "py-hep-ml",
    "py-hepdata-converter",
    "py-hepunits",
    "py-hieroglyph",
    "py-hist",
    "py-histoprint",
    "py-hjson",
    "py-hpack",
    "py-hstspreload",
    "py-htmlgen",
    "py-httpbin",
    "py-httpcore",
    "py-httplib2",
    "py-httpx",
    "py-huggingface-hub",
    "py-hvac",
    "py-hydra-core",
    "py-hypercorn",
    "py-hyperframe",
    "py-hyperlink",
    "py-hyperopt",
    "py-ics",
    "py-identify",
    "py-idna",
    "py-igor2",
    "py-imagehash",
    "py-imagesize",
    "py-imbalanced-learn",
    "py-immutabledict",
    "py-importlib-metadata",
    "py-importlib-resources",
    "py-incremental",
    "py-inflect",
    "py-iniconfig",
    "py-inquirer",
    "py-inquirerpy",
    "py-installer",
    "py-intensity-normalization",
    "py-interface-meta",
    "py-invoke",
    "py-ipycanvas",
    "py-ipyevents",
    "py-ipykernel",
    "py-ipympl",
    "py-ipyparallel",
    "py-ipython-genutils",
    "py-ipython",
    "py-ipyvue",
    "py-ipyvuetify",
    "py-ipywidgets",
    "py-irpf90",
    "py-isa-rwval",
    "py-iso8601",
    "py-isodate",
    "py-isoduration",
    "py-isort",
    "py-iterative-stats",
    "py-itolapi",
    "py-jacobi",
    "py-jamo",
    "py-jaraco-classes",
    "py-jaraco-functools",
    "py-javaproperties",
    "py-jedi",
    "py-jeepney",
    "py-jinja2-cli",
    "py-jinja2-time",
    "py-jmespath",
    "py-jmp",
    "py-joblib",
    "py-jprops",
    "py-jraph",
    "py-json-get",
    "py-json5",
    "py-jsonargparse",
    "py-jsonpatch",
    "py-jsonpath-ng",
    "py-jsonpickle",
    "py-jsonref",
    "py-jupyter-console",
    "py-jupyter-core",
    "py-jupyter-events",
    "py-jupyter-lsp",
    "py-jupyter-packaging",
    "py-jupyter-server-mathjax",
    "py-jupyter-server-proxy",
    "py-jupyter-server-terminals",
    "py-jupyter-server",
    "py-jupyter-server",
    "py-jupyter-telemetry",
    "py-jupyter",
    "py-jupyterhub",
    "py-jupyterlab-pygments",
    "py-jupyterlab-server",
    "py-jupyterlab-widgets",
    "py-jupyterlab",
    "py-jupytext",
    "py-keras-applications",
    "py-keras-preprocessing",
    "py-keras2onnx",
    "py-keyrings-alt",
    "py-keystoneauth1",
    "py-kmodes",
    "py-knack",
    "py-kombu",
    "py-kornia",
    "py-kosh",
    "py-kt-legacy",
    "py-kubernetes",
    "py-langcodes",
    "py-langsmith",
    "py-lark-parser",
    "py-latexcodec",
    "py-lazy-loader",
    "py-ldap3",
    "py-leather",
    "py-lfpykit",
    "py-lhsmdu",
    "py-libconf",
    "py-lightly-utils",
    "py-lightly",
    "py-lightning-api-access",
    "py-lightning-cloud",
    "py-lightning-fabric",
    "py-lightning-utilities",
    "py-linear-operator",
    "py-linecache2",
    "py-linkify-it-py",
    "py-lizard",
    "py-llnl-sina",
    "py-llnl-sina",
    "py-lmodule",
    "py-logmuse",
    "py-looseversion",
    "py-lzstring",
    "py-macholib",
    "py-machotools",
    "py-make",
    "py-mapclassify",
    "py-markdown-it-py",
    "py-markdown",
    "py-markdown2",
    "py-markov-clustering",
    "py-marshmallow",
    "py-matminer",
    "py-matplotlib-inline",
    "py-matplotlib-scalebar",
    "py-mda-xdrlib",
    "py-mdit-py-plugins",
    "py-mdurl",
    "py-meautility",
    "py-mercantile",
    "py-mergedeep",
    "py-merlin",
    "py-meshio",
    "py-metaphlan",
    "py-metomi-isodatetime",
    "py-metomi-rose",
    "py-metpy",
    "py-metric-learn",
    "py-mffpy",
    "py-mido",
    "py-mike",
    "py-minio",
    "py-minrpc",
    "py-mistletoe",
    "py-mizani",
    "py-mkdocs-autorefs",
    "py-mkdocs-material-extensions",
    "py-mkdocs-material",
    "py-mkdocs",
    "py-mkdocstrings-python",
    "py-mkdocstrings",
    "py-mlflow",
    "py-mlxtend",
    "py-mmtf-python",
    "py-moarchiving",
    "py-mock",
    "py-model-index",
    "py-modin",
    "py-modules-gui",
    "py-monkeytype",
    "py-monotonic",
    "py-motmetrics",
    "py-motor",
    "py-mpldock",
    "py-mplhep-data",
    "py-mplhep",
    "py-mrcfile",
    "py-msal-extensions",
    "py-msal",
    "py-msgpack-numpy",
    "py-msrest",
    "py-msrestazure",
    "py-multiecho",
    "py-multipledispatch",
    "py-munkres",
    "py-mutagen",
    "py-mxfold2",
    "py-mypy-extensions",
    "py-myst-parser",
    "py-namex",
    "py-nanobind",
    "py-nara-wpe",
    "py-natsort",
    "py-nbclassic",
    "py-nbclient",
    "py-nbconvert",
    "py-nbdime",
    "py-nbformat",
    "py-nbqa",
    "py-nbsphinx",
    "py-nbstripout",
    "py-nbval",
    "py-ncbi-genome-download",
    "py-ndg-httpsclient",
    "py-ndindex",
    "py-neovim-remote",
    "py-nest-asyncio",
    "py-netaddr",
    "py-netpyne",
    "py-neurokit2",
    "py-neurora",
    "py-nexus-sdk",
    "py-nibabel",
    "py-nitransforms",
    "py-node-semver",
    "py-nose",
    "py-nosexcover",
    "py-notebook-shim",
    "py-notebook",
    "py-nptyping",
    "py-npx",
    "py-ntlm-auth",
    "py-ntplib",
    "py-num2words",
    "py-numdifftools",
    "py-numpy-groupies",
    "py-ocnn",
    "py-odc-geo",
    "py-ogb",
    "py-omegaconf",
    "py-onnxconverter-common",
    "py-onnxmltools",
    "py-ont-fast5-api",
    "py-openai",
    "py-openapi-schema-pydantic",
    "py-opencensus",
    "py-opendatalab",
    "py-openmim",
    "py-openpmd-validator",
    "py-openpmd-viewer",
    "py-optax",
    "py-optuna",
    "py-orbax-checkpoint",
    "py-os-service-types",
    "py-oslo-config",
    "py-oslo-i18n",
    "py-oslo-serialization",
    "py-oslo-utils",
    "py-outdated",
    "py-overrides",
    "py-owlrl",
    "py-oyaml",
    "py-pacifica-downloader",
    "py-pacifica-namespace",
    "py-pacifica-uploader",
    "py-packaging",
    "py-palettable",
    "py-pamela",
    "py-pandas-stubs",
    "py-panedr",
    "py-panel",
    "py-papermill",
    "py-paralleltask",
    "py-param",
    "py-parameterized",
    "py-paramiko",
    "py-parse-type",
    "py-parsl",
    "py-parsley",
    "py-parso",
    "py-partd",
    "py-particle",
    "py-paste",
    "py-pastedeploy",
    "py-pastel",
    "py-pastml",
    "py-pathlib2",
    "py-pathy",
    "py-patool",
    "py-patsy",
    "py-pbr",
    "py-pdm-pep517",
    "py-pdoc3",
    "py-pebble",
    "py-pem",
    "py-pennylane",
    "py-pep517",
    "py-pep8-naming",
    "py-pep8",
    "py-petastorm",
    "py-pfzy",
    "py-pgzip",
    "py-phonenumbers",
    "py-phylophlan",
    "py-pickleshare",
    "py-picmistandard",
    "py-pika",
    "py-pint-xarray",
    "py-pipdeptree",
    "py-piper",
    "py-pkginfo",
    "py-pkgutil-resolve-name",
    "py-plac",
    "py-planet",
    "py-planetary-computer",
    "py-platformdirs",
    "py-plotext",
    "py-plotnine",
    "py-pluggy",
    "py-plum-dispatch",
    "py-pockets",
    "py-poetry-core",
    "py-poetry-dynamic-versioning",
    "py-poetry-plugin-export",
    "py-poetry-plugin-tweak-dependencies-version",
    "py-poetry",
    "py-pooch",
    "py-portalocker",
    "py-portend",
    "py-portpicker",
    "py-poyo",
    "py-pprintpp",
    "py-pre-commit",
    "py-priority",
    "py-profilehooks",
    "py-progressbar2",
    "py-prompt-toolkit",
    "py-properscoring",
    "py-proto-plus",
    "py-protoc-gen-swagger",
    "py-prov",
    "py-prwlock",
    "py-psij-python",
    "py-psmon",
    "py-ptyprocess",
    "py-pulp",
    "py-pulsar-galaxy-lib",
    "py-pure-eval",
    "py-py-tes",
    "py-py",
    "py-py4j",
    "py-pyaestro",
    "py-pyaml",
    "py-pyani",
    "py-pyasn1-modules",
    "py-pyasn1",
    "py-pybtex-docutils",
    "py-pycm",
    "py-pycodestyle",
    "py-pyct",
    "py-pydantic-tes",
    "py-pydap",
    "py-pydata-sphinx-theme",
    "py-pydeface",
    "py-pydeprecate",
    "py-pydevtool",
    "py-pydicom",
    "py-pydmd/isuue",
    "py-pydmd",
    "py-pydocstyle",
    "py-pydub",
    "py-pyedr",
    "py-pyem",
    "py-pyepsg",
    "py-pyeventsystem",
    "py-pyflakes",
    "py-pygdbmi",
    "py-pygithub",
    "py-pyglet",
    "py-pygments-pytest",
    "py-pygments",
    "py-pyh5md",
    "py-pyisemail",
    "py-pyjwt",
    "py-pykml",
    "py-pykwalify",
    "py-pylab-sdk",
    "py-pylev",
    "py-pylint",
    "py-pylops",
    "py-pymatreader",
    "py-pymc3",
    "py-pymdown-extensions",
    "py-pympler",
    "py-pymysql",
    "py-pynpm",
    "py-pynrrd",
    "py-pynvml",
    "py-pyopenssl",
    "py-pyparsing",
    "py-pyperf",
    "py-pypinyin",
    "py-pypng",
    "py-pyproject-hooks",
    "py-pyproject-metadata",
    "py-pyproject-parser",
    "py-pyqt-builder",
    "py-pyqtgraph",
    "py-pyquaternion",
    "py-pyro-api",
    "py-pyro-ppl",
    "py-pyrr",
    "py-pyserial",
    "py-pyshacl",
    "py-pyspellchecker",
    "py-pystac-client",
    "py-pystac",
    "py-pysurfer",
    "py-pytaridx",
    "py-pytest-aiohttp",
    "py-pytest-arraydiff",
    "py-pytest-astropy-header",
    "py-pytest-astropy",
    "py-pytest-asyncio",
    "py-pytest-benchmark",
    "py-pytest-check-links",
    "py-pytest-cov",
    "py-pytest-cpp",
    "py-pytest-datadir",
    "py-pytest-doctestplus",
    "py-pytest-fail-slow",
    "py-pytest-filter-subpackage",
    "py-pytest-flake8",
    "py-pytest-html",
    "py-pytest-isort",
    "py-pytest-metadata",
    "py-pytest-mock",
    "py-pytest-mpi",
    "py-pytest-mypy",
    "py-pytest-openfiles",
    "py-pytest-parallel",
    "py-pytest-pylint",
    "py-pytest-qt",
    "py-pytest-random-order",
    "py-pytest-remotedata",
    "py-pytest-runner",
    "py-pytest-subprocess",
    "py-pytest-timeout",
    "py-pytest-workflow",
    "py-pytest",
    "py-python-benedict",
    "py-python-box",
    "py-python-certifi-win32",
    "py-python-daemon",
    "py-python-dotenv",
    "py-python-editor",
    "py-python-engineio",
    "py-python-fsutil",
    "py-python-jose",
    "py-python-keystoneclient",
    "py-python-lsp-jsonrpc",
    "py-python-lsp-server",
    "py-python-magic",
    "py-python-markdown-math",
    "py-python-memcached",
    "py-python-picard",
    "py-python-ptrace",
    "py-python-socketio",
    "py-python-sotools",
    "py-python-subunit",
    "py-python-swiftclient",
    "py-python-utils",
    "py-python-xlib",
    "py-python-xmp-toolkit",
    "py-python3-openid",
    "py-pythonqwt",
    "py-pytimeparse",
    "py-pytoml",
    "py-pytorch-lightning",
    "py-pytorch-sphinx-theme",
    "py-pyts",
    "py-pytz",
    "py-pyupgrade",
    "py-pyutilib",
    "py-pyvistaqt",
    "py-pyviz-comms",
    "py-pyvolve",
    "py-pyxlsb",
    "py-pyyaml-env-tag",
    "py-qiskit-ibm-provider",
    "py-qiskit-nature",
    "py-qpsolvers",
    "py-qsymm",
    "py-qtawesome",
    "py-qtconsole",
    "py-quantum-blackbird",
    "py-quantum-xir",
    "py-quart",
    "py-quaternionic",
    "py-querystring-parser",
    "py-questionary",
    "py-qutip-qip",
    "py-radiant-mlhub",
    "py-rapidfuzz-capi",
    "py-rarfile",
    "py-rasterstats",
    "py-ratelim",
    "py-ratelimiter",
    "py-raven",
    "py-rdflib-jsonld",
    "py-rdflib",
    "py-rdt",
    "py-reacton",
    "py-readchar",
    "py-readme-renderer",
    "py-recommonmark",
    "py-redis",
    "py-refgenconf",
    "py-refgenie",
    "py-reindent",
    "py-reportseff",
    "py-repoze-lru",
    "py-requests-cache",
    "py-requests-file",
    "py-requests-mock",
    "py-requests-ntlm",
    "py-requests-toolbelt",
    "py-requests-unixsocket",
    "py-requests",
    "py-requirements-parser",
    "py-reretry",
    "py-resolvelib",
    "py-responses",
    "py-resultsfile",
    "py-retry",
    "py-rfc3339-validator",
    "py-rfc3986-validator",
    "py-rfc3986",
    "py-rich-click",
    "py-rich",
    "py-rise",
    "py-robocrys",
    "py-robotframework",
    "py-rocrate",
    "py-roifile",
    "py-rosdep",
    "py-rosdistro",
    "py-rosinstall-generator",
    "py-rospkg",
    "py-routes",
    "py-rply",
    "py-rq",
    "py-rsa",
    "py-rseqc",
    "py-rst2pdf",
    "py-ruamel-yaml-jinja2",
    "py-rx",
    "py-s3fs",
    "py-s3transfer",
    "py-sacrebleu",
    "py-sanic",
    "py-scanpy",
    "py-schema",
    "py-scikit-build-core",
    "py-scikit-build",
    "py-scooby",
    "py-scp",
    "py-screed",
    "py-sdmetrics",
    "py-sdv",
    "py-seekpath",
    "py-segmentation-models-pytorch",
    "py-selenium",
    "py-semantic-version",
    "py-semver",
    "py-send2trash",
    "py-sentry-sdk",
    "py-serpent",
    "py-setupmeta",
    "py-setuptools-cpp",
    "py-setuptools-git-versioning",
    "py-setuptools-git",
    "py-setuptools-rust",
    "py-setuptools-scm-git-archive",
    "py-setuptools-scm",
    "py-shellescape",
    "py-shellingham",
    "py-shippinglabel",
    "py-shtab",
    "py-sierrapy",
    "py-simpervisor",
    "py-simpleeval",
    "py-singledispatchmethod",
    "py-six",
    "py-skl2onnx",
    "py-slicer",
    "py-smac",
    "py-smartypants",
    "py-smmap",
    "py-snakemake-executor-plugin-azure-batch",
    "py-snakemake-executor-plugin-cluster-generic",
    "py-snakemake-executor-plugin-cluster-sync",
    "py-snakemake-executor-plugin-drmaa",
    "py-snakemake-executor-plugin-flux",
    "py-snakemake-executor-plugin-googlebatch",
    "py-snakemake-executor-plugin-kubernetes",
    "py-snakemake-executor-plugin-slurm-jobstep",
    "py-snakemake-executor-plugin-slurm",
    "py-snakemake-executor-plugin-tes",
    "py-snakemake-interface-common",
    "py-snakemake-interface-executor-plugins",
    "py-snakemake-interface-report-plugins",
    "py-snakemake-interface-storage-plugins",
    "py-snakemake-storage-plugin-azure",
    "py-snakemake-storage-plugin-fs",
    "py-snakemake-storage-plugin-ftp",
    "py-snakemake-storage-plugin-gcs",
    "py-snakemake-storage-plugin-http",
    "py-snakemake-storage-plugin-s3",
    "py-snakemake-storage-plugin-sftp",
    "py-snakemake-storage-plugin-zenodo",
    "py-snoop",
    "py-snowballstemmer",
    "py-snuggs",
    "py-sobol-seq",
    "py-social-auth-core",
    "py-sortedcollections",
    "py-sortedcontainers",
    "py-soupsieve",
    "py-soyclustering",
    "py-spacy-legacy",
    "py-spacy-loggers",
    "py-sparse",
    "py-spatialite",
    "py-spectral",
    "py-spgl1",
    "py-sphinx-argparse",
    "py-sphinx-autodoc-typehints",
    "py-sphinx-basic-ng",
    "py-sphinx-book-theme",
    "py-sphinx-copybutton",
    "py-sphinx-design",
    "py-sphinx-immaterial",
    "py-sphinx-jinja2-compat",
    "py-sphinx-multiversion",
    "py-sphinx-removed-in",
    "py-sphinx-rtd-dark-mode",
    "py-sphinx-rtd-theme",
    "py-sphinx-tabs",
    "py-sphinx-theme-builder",
    "py-sphinx-toolbox",
    "py-sphinx",
    "py-sphinxcontrib-applehelp",
    "py-sphinxcontrib-bibtex",
    "py-sphinxcontrib-devhelp",
    "py-sphinxcontrib-htmlhelp",
    "py-sphinxcontrib-jquery",
    "py-sphinxcontrib-jsmath",
    "py-sphinxcontrib-mermaid",
    "py-sphinxcontrib-moderncmakedomain",
    "py-sphinxcontrib-napoleon",
    "py-sphinxcontrib-programoutput",
    "py-sphinxcontrib-qthelp",
    "py-sphinxcontrib-serializinghtml",
    "py-sphinxcontrib-trio",
    "py-sphinxcontrib-trio/sphinxcontrib",
    "py-sphinxcontrib-websupport",
    "py-sphobjinv",
    "py-sqlalchemy-migrate",
    "py-sqlalchemy-stubs",
    "py-sqlparse",
    "py-sshtunnel",
    "py-stack-data",
    "py-starlette",
    "py-starsessions",
    "py-stevedore",
    "py-stomp-py",
    "py-strawberryfields",
    "py-stui",
    "py-subrosa",
    "py-subword-nmt",
    "py-superqt",
    "py-supervisor",
    "py-svgpathtools",
    "py-svgutils",
    "py-svgwrite",
    "py-swagger-spec-validator",
    "py-symfit",
    "py-sysrsync",
    "py-tatsu",
    "py-tblib",
    "py-tbparse",
    "py-tempita",
    "py-tempora",
    "py-tenacity",
    "py-tensorboard-plugin-wit",
    "py-tensorboardx",
    "py-tensorflow-datasets",
    "py-tensorflow-metadata",
    "py-tensorflow-probability",
    "py-tensorly",
    "py-testfixtures",
    "py-testpath",
    "py-testresources",
    "py-testscenarios",
    "py-testtools",
    "py-text-unidecode",
    "py-textual",
    "py-textwrap3",
    "py-thewalrus",
    "py-thop",
    "py-threadpoolctl",
    "py-throttler",
    "py-tidynamics",
    "py-timm",
    "py-tinycss2",
    "py-tinydb",
    "py-tldextract",
    "py-tokenize-rt",
    "py-tomli-w",
    "py-tomli",
    "py-tomlkit",
    "py-toposort",
    "py-torch-harmonics",
    "py-torchdiffeq",
    "py-torchmeta",
    "py-torchmetrics",
    "py-torchsummary",
    "py-tox",
    "py-toytree",
    "py-tpot",
    "py-tqdm",
    "py-traceback2",
    "py-traitlets",
    "py-transformers",
    "py-tree-math",
    "py-treelib",
    "py-trojanzoo-sphinx-theme",
    "py-trove-classifiers",
    "py-trx-python",
    "py-tuswsgi",
    "py-twine",
    "py-typeguard",
    "py-typer",
    "py-types-dataclasses",
    "py-types-pkg-resources",
    "py-types-psutil",
    "py-types-python-dateutil",
    "py-types-pytz",
    "py-types-requests",
    "py-types-setuptools",
    "py-types-typed-ast",
    "py-types-urllib3",
    "py-typesentry",
    "py-typeshed-client",
    "py-typing-inspect",
    "py-typish",
    "py-tzdata",
    "py-ubiquerg",
    "py-uc-micro-py",
    "py-uhi",
    "py-uncertainties",
    "py-unidecode",
    "py-unyt",
    "py-update-checker",
    "py-uproot",
    "py-uproot3-methods",
    "py-uproot3",
    "py-uri-template",
    "py-uritemplate",
    "py-url-normalize",
    "py-urllib3-secure-extra",
    "py-urllib3",
    "py-userpath",
    "py-uvicorn",
    "py-uvw",
    "py-vcrpy",
    "py-vcstool",
    "py-vcstools",
    "py-vector-quantize-pytorch",
    "py-vector",
    "py-vermin",
    "py-versioneer-518",
    "py-versioneer",
    "py-verspec",
    "py-vine",
    "py-virtualenv",
    "py-vsts",
    "py-waitress",
    "py-wasabi",
    "py-wcwidth",
    "py-webargs",
    "py-webcolors",
    "py-webencodings",
    "py-webob",
    "py-websocket-client",
    "py-werkzeug",
    "py-whey-pth",
    "py-whey",
    "py-whichcraft",
    "py-whoosh",
    "py-widgetsnbextension",
    "py-wincertstore",
    "py-wsproto",
    "py-wurlitzer",
    "py-ww",
    "py-xanadu-cloud-client",
    "py-xarray-tensorstore",
    "py-xenv",
    "py-xesmf",
    "py-xhistogram",
    "py-xlrd",
    "py-xlsxwriter",
    "py-xlwt",
    "py-xmltodict",
    "py-xskillscore",
    "py-xyzservices",
    "py-yacman",
    "py-yacs",
    "py-yapf",
    "py-yaspin",
    "py-youtube-dl",
    "py-yq",
    "py-yte",
    "py-ytopt",
    "py-zc-buildout",
    "py-zfit-interface",
    "py-zict",
    "py-zipp",
    "py-zipstream-new",
    "py-zope-event",
]

import json
from typing import Dict, List

from spack.dependency import Dependency
from spack.deptypes import LINK, RUN
from spack.spec import Spec
from spack.version import StandardVersion

# possible_versions: Dict[str, Dict[StandardVersion, Dict[str, List[StandardVersion]]]] = {}

# for name in packages:
#     s = Spec(name)
#     s._mark_concrete()
#     pkg = s.package
#     v: StandardVersion
#     when: Spec
#     edge: Dict[str, Dependency]

#     possible_versions[name] = {}

#     for v in pkg.versions:
#         deps_for_version: Dict[str, List[StandardVersion]] = {}

#         for when, edge in pkg.dependencies.items():
#             if not v.satisfies(when.versions):
#                 continue
#             for dep_name, dep in edge.items():
#                 if dep.depflag & (LINK | RUN) == 0:
#                     continue
#                 if spack.repo.PATH.is_virtual(dep_name):
#                     continue
#                 child = Spec(dep_name)
#                 child._mark_concrete()
#                 if dep_name not in deps_for_version:
#                     deps_for_version[dep_name] = list(child.package.versions.keys())
#                 # filter matching versions
#                 deps_for_version[dep_name] = [v for v in deps_for_version[dep_name] if v.satisfies(dep.spec.versions)]

#         possible_versions[name][str(v)] = {
#             dep_name: [str(w) for w in versions]
#             for dep_name, versions in deps_for_version.items()
#         }


# print(json.dumps(possible_versions, sort_keys=True))


a = json.load(open("before"))
b = json.load(open("after"))

from spack.version import VersionList, VersionRange


def to_version_list(versions, all_versions):
    vlist = []
    i = 1
    j = all_versions.index(versions[0]) + 1
    start = StandardVersion.typemin() if j == 1 else versions[0]

    while i < len(versions):
        if versions[i] != all_versions[j]:
            vlist.append(VersionRange(start, versions[i - 1]))
            start = versions[i]
            j = all_versions.index(versions[i])
        i += 1
        j += 1

    last = StandardVersion.typemax() if j == len(all_versions) else versions[-1]
    vlist.append(VersionRange(start, last))

    return VersionList(vlist)


from collections import defaultdict

inf_versions = {StandardVersion.from_string(x) for x in ("develop", "main", "master")}

for name in packages:
    a_pkg = a[name]
    b_pkg = b[name]

    versions_in_a = set(StandardVersion.from_string(x) for x in a_pkg.keys()) - inf_versions
    versions_in_b = set(StandardVersion.from_string(x) for x in b_pkg.keys()) - inf_versions

    change_to_version = defaultdict(list)

    if versions_in_a != versions_in_b:
        a_min_b = versions_in_a - versions_in_b
        b_min_a = versions_in_b - versions_in_a
        if a_min_b:
            change_to_version[f"removed versions {', '.join(str(x) for x in sorted(a_min_b))}"] = (
                True
            )
        if b_min_a:
            change_to_version[f"added versions {', '.join(str(x) for x in sorted(b_min_a))}"] = (
                True
            )

    for v in sorted(versions_in_a & versions_in_b):
        deps_a = next(val for key, val in a_pkg.items() if StandardVersion.from_string(key) == v)
        deps_b = next(val for key, val in b_pkg.items() if StandardVersion.from_string(key) == v)

        deps_in_a = set(deps_a.keys())
        deps_in_b = set(deps_b.keys())

        changes_for_version = []

        if deps_in_a != deps_in_b:
            if deps_in_a - deps_in_b - {"py-setuptools"}:
                changes_for_version.append(
                    f"deleted {', '.join(f'^{d}' for d in sorted(deps_in_a - deps_in_b))}"
                )
            if deps_in_b - deps_in_a:
                changes_for_version.append(
                    f"added {', '.join(f'^{d}' for d in sorted(deps_in_b - deps_in_a))}"
                )

        for dep in sorted(deps_in_a & deps_in_b):
            a_v = set(StandardVersion.from_string(v) for v in deps_a[dep])
            b_v = set(StandardVersion.from_string(v) for v in deps_b[dep])

            if a_v != b_v:
                all_versions = sorted(spack.repo.PATH.get_pkg_class(dep).versions.keys())
                a_min_b = sorted(a_v - b_v)
                if a_min_b:
                    try:
                        version_list = to_version_list(a_min_b, all_versions)
                    except Exception:
                        version_list = ",".join(str(x) for x in a_min_b)
                    version_specifier = "" if str(version_list) == ":" else f"@{version_list}"
                    changes_for_version.append(f"disallowed `^{dep}{version_specifier}`")
                b_min_a = sorted(b_v - a_v)
                if b_min_a:
                    try:
                        version_list = to_version_list(b_min_a, all_versions)
                    except Exception:
                        version_list = ",".join(str(x) for x in b_min_a)
                    version_specifier = "" if str(version_list) == ":" else f"@{version_list}"
                    changes_for_version.append(f"allowed `^{dep}{version_specifier}`")

        if changes_for_version:
            change_to_version["\n".join(changes_for_version)].append(v)

    if change_to_version:
        print(f"@@ {name} @@")
    for changes_for_version, versions in change_to_version.items():
        if versions is True:
            diff = "-" if changes_for_version.startswith("removed") else "+"
            print(f"{diff} `{name}` {changes_for_version}")
            continue
        try:
            version_list = to_version_list(
                versions, sorted(spack.repo.PATH.get_pkg_class(name).versions.keys())
            )
        except Exception as e:
            version_list = ",".join(str(v) for v in versions)
        for line in changes_for_version.split("\n"):
            diff = "-" if line.startswith("deleted") or line.startswith("disallowed") else "+"
            version_specifier = "" if str(version_list) == ":" else f"@{version_list}"
            print(f"{diff} `{name}{version_specifier}` {line}")
    if change_to_version:
        print()
